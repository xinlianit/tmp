<?php
/**
 * 验证码验证
 * @author Create by JiRY
 * @param string $code      验证码
 * @param string $id        验证码ID
 * @return boolean
 */
function check_verify($code , $id = ''){
    $verify = new \Think\Verify();
    return $verify->check($code, $id);
}

/**
 * 获取salt值
 * @author Create by JiRY
 * @param integer $length      salt字符长度
 * @return string
 */
function get_salt($length=10){
    $str = null;
    $strPol = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
    $max = strlen($strPol)-1;
    srand(microtime()*100000);

    for($i=0;$i<$length;$i++){
        //rand($min,$max)生成介于min和max两个数之间的一个随机整数
        $str.=$strPol[rand(0,$max)];
    }

    return $str;
}

/**
 * 密码加密
 * @author Create by JiRY
 * @param string $user_pass     用户明文密码
 * @param string $encode_salt   密码加密私钥
 * @return boolean
 */
function pass_encode($user_pass,$encode_salt){
    //取密钥最后一个字母，求模。在模的位置插入该字母
    $encode_salt = str_split($encode_salt);
    $num = count($encode_salt);
    foreach($encode_salt as $l){
        $i = ord($l) % $num ;
        $user_pass = substr($user_pass,0,$i) . $l . substr($user_pass,$i) ;
    }
    return md5($user_pass);
}

/**
 * 发送电子邮件
 * @author JiRY
 * @param string $to            收件人
 * @param string $subject       邮件主题
 * @param string $message       邮件内容
 * @param array $attachment     附件列表
 * @return boolean
 */
function send_mail($to, $subject, $message, $attachment=array()){
    import('PHPMailer.phpmailer', APP_LIBRARY);
    
    $mail_config = C('MAIL_SERVER');
    
    $mail   = new PHPMailer(true);
    $mail->IsSMTP();
    $mail->CharSet          = $mail_config['CHARSET'];
    $mail->SMTPAuth         = true;
    $mail->Port             = $mail_config['PORT'];
    $mail->Host             = $mail_config['HOST'];            //邮箱smtp地址
    $mail->Username         = $mail_config['USER_NAME'];       //你的邮箱账号
    $mail->Password         = $mail_config['PASSWORD'];       //你的邮箱密码
    $mail->From             = $mail_config['USER_NAME'];        //你的邮箱账号
    $mail->FromName         = $mail_config['NICK'];             //发送人昵称
    $mail->AddAddress($to);     //收件人
    $mail->Subject          = $subject;      //主题
    $mail->Body             = $message;     //正文
    $mail->WordWrap         = $mail_config['WORD_WRAP'];        //自动换行
    
    if( !empty($attachment) ){
        foreach($attachment as $k=>$v){
            if(is_int($k)){
                $mail->AddAttachment($v); //添加附件
            }else if(!is_int($k) && !empty($v)){
                $mail->AddAttachment($k, $v); //添加附件
            }
        }
    }
    
    $mail->IsHTML(true);
    
    if( $mail->Send() ){
        return true;
    }
    
    return false;
}

/**
 * arrayKeyValChange函数调用方法，内部调用使用，大小写快捷转换函数
 * @param string $type          类型；upper：大写、lower：小写
 * @param string $string        字符串
 */
function upperlower(&$item, $key, $type){
    switch( $type ){
        case 'upper':
            $item = strtoupper( $item );
            break;
        case 'lower':
            $item = strtolower( $item );
            break;
        default:
            break;
    }
}


/**
 * 数组键值大小写转换
 * @param array $array              数组元素
 * @param string $type              转换类型；upper：大写、lower：小写
 * @param number $option            转换选项；1:数组值转换、2：数组键转换、3：数组键值转换
 * @return array $_result           失败返回false，否则返回转换后的数组
 */
function arrayKeyValChange(&$array , $type = 'upper' , $option = 1)
{
    if (empty($array) || !is_array($array)) return false;
    $_result = false;
    $_type = 'upper' == $type ? CASE_UPPER : CASE_LOWER;

    switch (intval($option)) {
        case 1:
            $_result = array_walk_recursive($array, 'upperlower', $type);
            $_result = $_result ? $array : false;
            break;
        case 2:
            $_result = array_change_key_case($array, $_type);
            break;
        case 3:
            $_result = array_walk_recursive($array, 'upperlower', $type);
            $_result = $_result ? array_change_key_case($array, $_type) : false;
            break;
    }
    return $_result;
}

/**
 * 日志记录-手动日志
 * @param string $msg  日志消息
 * @param string $level 日志级别
 * @param string $prefix 文件前缀
 * @author zhaoxz(441534536@qq.com)
 */
function logs($msg,$level='ERR',$prefix=''){
    // 检测模块是否存在
    if( MODULE_NAME && (defined('BIND_MODULE') || !in_array_case(MODULE_NAME,C('MODULE_DENY_LIST')) ) && is_dir(APP_PATH.MODULE_NAME)){
        $log_path = str_replace(MODULE_NAME.'/', '', C('LOG_PATH'));
    }else{
        $log_path = C('LOG_PATH');
    }
    
    //日志路径
    if(!empty($prefix)){
        $destination = $log_path.'Diy/'.$prefix.'_'.date('y_m_d').'.log'; 
    }else{
        $destination = $log_path.'Diy/'.date('y_m_d').'.log'; 
    }
    
    //对象或数组数据，JSON格式化
    if( is_array($msg) || is_object($msg) ){
        $msg = json_encode($msg);
    }

    //写入日志
    \Think\Log::write($msg,MODULE_NAME.'_'.$level,'File',$destination);
}

if(!function_exists("array_column")){
    /**
     * 当PHP 5 < 5.5.0时，PHP默认不支持，返回数组中指定的一列
     * @param array  $input            来源数组
     * @param string $column_name      选中列键值
     * @param string $index_key        作为新数组键值
     * @return multitype:| array
     */
    function array_column($input, $column_name, $index_key = null) {
        $columnKeyIsNumber = (is_numeric($column_name)) ? true : false;
        $indexKeyIsNull = (is_null($index_key)) ? true : false;
        $indexKeyIsNumber = (is_numeric($index_key)) ? true : false;
        $result = array();
        foreach ((array) $input as $key => $row) {
            if ($columnKeyIsNumber) {
                $tmp = array_slice($row, $column_name, 1);
                $tmp = (is_array($tmp) && !empty($tmp)) ? current($tmp) : null;
            } else {
                $tmp = isset($row[$column_name]) ? $row[$column_name] : null;
            }
            if (!$indexKeyIsNull) {
                if ($indexKeyIsNumber) {
                    $key = array_slice($row, $index_key, 1);
                    $key = (is_array($key) && !empty($key)) ? current($key) : null;
                    $key = is_null($key) ? 0 : $key;
                } else {
                    $key = isset($row[$index_key]) ? $row[$index_key] : 0;
                }
            }
            $result[$key] = $tmp;
        }
        return $result;
    }
}

/**
 * 通过输入图片规格，自动转换成对应图片名称
 * @param String $img_name 资源文件名(可以包含路径)
 * @param String $spec     生成图片规格(类似: 194x204)
 * @return String          新图片文件名
 */
function generateImageName($img_name = null, $spec = '194x204'){
    $new_name = $img_name;
    if(isset($img_name) && !empty($img_name)){
        $new_name = str_replace('\\', '/', $img_name);
        $_arrname = explode('/', $new_name);

        if(($_arrcount = count($_arrname))>0){
            $_new_file = explode('.', $_arrname[$_arrcount - 1]);
            if(2 == count($_new_file)){
                $_new_file_name = $_new_file[0] .= '_' . $spec;

                $new_name = null;
                foreach ( $_arrname as $value ){
                    $new_name .= $value . '/';
                }

                $new_name  .= $_new_file_name . '.' . $_new_file[1];
            }
        }
    }
    return C('FASTDFS_URL') . $new_name;
}


/**
 * 通过输入图片相对路径，自动转换成对图片资源绝对路径
 * @param String $img_name 资源文件名(可以包含路径)
 * @return String          新图片文件名
 */
function generateImagePath($img_name = null){
    if(isset($img_name) && !empty($img_name) && strlen($img_name)>1){
        return C('FASTDFS_URL') . ltrim($img_name, "\\,/");
    }

    return $img_name;
}


/**
 * 产生随机数种子(seed with microseconds)
 * @param Integer  $hotel_id       酒店ID
 * @return float
 */
function make_seed($hotel_id = 0){
    list($usec, $sec) = explode(' ', microtime());
    return (float) $sec + ((float) $usec * 100000) + $hotel_id;
}


/**
 * 签名通用方法
 * @param arr $param 默认为空，按POST 数据去做签名
 * @return string 签名数据
 * @author zhaoxz
 */
function make_sign($param = null) {
    //初始化变量
    $buff = '';
    //要签名的数据
    $data = is_null($param) ? I("post.") : $param;
    //所有数据做排序
    ksort($data);
    //循环拼接加密串
    foreach ($data as $k => $v) {
        $v = html_entity_decode($v);
        //排除键值为 sign ,及值为空的数据
        if ($k != "sign" && $v != "" && !is_array($v)) {
            $v = str_replace('&quot;', '"', $v);
            $buff .= $k . "=" . $v . "&";
        }
    }
    $buff = trim($buff, "&");
    $key = C("SIGNKEY");
    //拼接公钥
    $string = $buff . "&key=" . $key;
    //MD5加密
    $string = md5($string);

//    echo $string;
//    exit();
    //所有字符转为大写
    $result = strtoupper($string);
    return $result;
}

/**
 * 签名验证检测
 * @param string $sign 要验证的签名结果
 * @param array $param 签名数据
 * @return boolean
 * @author zhaoxz
 */
function check_sign($sign = null, $param = null) {
    //当前签名
    $server_sign = make_sign($param);
    //要验证的签名结果
    $client_sign = is_null($sign) ? I("post.sign", '') : $sign;

    //签名对比
    if ($server_sign !== $client_sign) {
        return false;
    }
    return true;
}


/**
 * 金额格式化输出 只做输出显示用（如果要参与计算慎重）
 * @param float $money      要格式化的金额
 * @param int $entry_unit   输入单位 1:元 2：分
 * @param int $output_unit  输出单位 1:元 2：分
 * @param int $decimal      保留小数位数 默认为2
 * @param boolean/string $join_unit 输出是否拼接单位
 * @return float/int/string
 */
function money_num_format($money,$entry_unit=2,$output_unit=1,$decimal=2,$join_unit=false){
    //先将金额转化为分
    if($entry_unit === 1){
        $money = 100*$money;
    }
    
    if($output_unit === 1){//按元输出
        $money = $money/100;
    }
    
    //小数保留处理
    $money = sprintf("%.{$decimal}f", $money);
    
    if($join_unit === true){
        $unit = $output_unit === 1?'元':'分';
    }elseif ($join_unit === false) {
        return $money;
    }else{
        $unit = $join_unit;
    }
    return $money.$unit;
}



/*
 * 获取当前时间戳，精度为毫秒级别
 */
function getMillisecond() {
    list($t1, $t2) = explode(' ', microtime());
    return (float)sprintf('%.0f',(floatval($t1)+floatval($t2))*1000);
}

/**
 * 通过资源ID 返回资源地址
 * @param type $res_id
 * @param type $width_domain
 * @return boolean
 */
function get_src($res_id,$width_domain=true){
    $rs = M('Resource')->where(array('id'=>$res_id))->find();
    if(!$rs){
        return false;
    }
    $src = $width_domain?C('FASTDFS_URL').$rs['res_path']:$rs['res_path'];
    return $src;
}

/**
 * 格式化sql查询条件
 * @param array $param 查询条件(一般为前端传入)
 * @param array $_map 并入的结果条件
 * @return array
 */
function where_format($param,$_map=array()){
    
    $_this_map = array();
    foreach ($param as $key=>$val) {
        $_this_where = array();
        switch ($key) {
            case 'like':
                
                foreach ($val as $k=>$v) {
                    $_this_where[$k]  = array($key, '%'.$v.'%');
                }
                $_this_where['_logic'] = 'and';
                break;
            case 'eq':
            case 'elt':
            case 'egt':
            case 'in':
                foreach ($val as $k=>$v) {
                    $_this_where[$k]  = array($key,$v);
                }
                $_this_where['_logic'] = 'and';
                break;
        }
        
        if(!isset($_this_map['_complex'])){//第一次
            $_this_map['_complex'] = $_this_where;
        }else{//此条件已经存在
            $_tmp = $_this_map;
            unset($_this_map);
            $_this_where['_complex'] = $_tmp['_complex'];
            $_this_map['_complex'] = $_this_where;
        }
        
    }
    
    if(!empty($_this_map)){
        $_map['_complex'] = $_this_map['_complex'];
    }
    return $_map;
}

