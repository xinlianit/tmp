<?php
/**
 * 通过节点获取Url
 * @author JiRY
 * @param int $nodeId       节点ID
 * @return string
 */
function get_url_by_node($nodeId){
    $name = D('Common' , 'Logic')->getField('AuthRule', 'name', array('id'=>$nodeId));
    
    @list($module , $controller , $action) = explode('/', $name);
    
    if(isset($controller) && isset($action))
        return U($controller.'/'.$action);
    
    return '';
}

/**
 * 空值默认返回值
 * @param string|array $value          初始值
 * @param string $default              默认值
 * @return string|array
 */
function _default($value, $default=null){
    $default = !empty($default) ? $default : C('FIELD_DEFAULT_VALUE');
    return !empty($value) ? $value : $default;
}

/**
 * 获取默认图
 * @param string $resource_id       图片资源ID
 * @param string $size              默认图尺寸
 * @param string $ext               图片后缀
 * @return string
 */
function default_img($resource_id, $size='60_60', $ext='png'){
    $img = '/Public/static/images/default_' . $size . '.' . $ext;
    
    //获取资源详情
    $resource = D('Resource')->getInfo($resource_id);
    
    if( $resource && !empty($resource['res_path']) ){
        $img = C('FASTDFS_URL') . $resource['res_path'];
    }
    
    return $img;
}

/**
 * 获取字段值
 * @param string $modelName         模型名称
 * @param string $field             获取字段
 * @param array $condition          查询条件
 * @return string
 */
function get_field($modelName, $field, $condition=array()){
    return D('Common', 'Logic')->getField($modelName, $field, $condition);
}

/**
 * 获取多行单个字段,以字符串形式返回
 * @param string $modelName         模型名称
 * @param string|array $field       获取字段
 * @param array $condition          查询条件
 * @param string $flag              分隔符
 * @return string
 */
function get_fields_to_string($modelName, $field, $condition=array(), $flag='、'){
    
    if( !empty($condition) ){
        foreach($condition as $k=>$v){
            if( $v[0] == 'in' && empty($v[1])){
                $condition[$k][1] = array(0);
            }
               
        }
    }
    
    if( !empty($condition) ){
        $data = D('Common', 'Logic')->getFields($modelName, $field, $condition);
        
        $string = implode($flag, array_column($data, $field));
    }
    
    return $string ? $string : '';
}

/**
 * 获取多条记录单个字段以数组格式返回
 * @param string $modelName         模型名称
 * @param string $field             字段名称
 * @param array $condition          查询条件
 * @param array
 */
function get_fields_to_array($modelName, $field, $condition){
    $data = D('Common', 'Logic')->getRows($modelName, $condition, $field);
    
    $arr = array();
    if( !empty($data) && is_array($data) ){
        foreach($data as $v){
            array_push($arr, $v[$field]);
        }
    }
    
    return $arr;
}

/**
 * 获取状态字段
 * @param string $table             表名
 * @param string $filed             字段名
 * @param int $value                字段值
 * @param string $attr              字段值属性；name:属性名称、value:属性值
 * @return array|array
 */
function get_field_status($table=null, $filed=null, $value=null, $attr=null){
    $status_field       = C('STATUS_FIELD');
    
    $result = $status_field;
    
    if($table != null && $filed == null && array_key_exists($table, $status_field)){
        $result = $status_field[$table]; 
    }else if($table != null && $filed != null && $value == null && array_key_exists($table, $status_field) && array_key_exists($filed, $status_field[$table])){
        $result = $status_field[$table][$filed]; 
    }else if($table != null && $filed != null && $value != null && array_key_exists($table, $status_field) && array_key_exists($filed, $status_field[$table]) && array_key_exists('VALUE_'.$value, $status_field[$table][$filed])){
        $result = $status_field[$table][$filed]['VALUE_'.$value];
    }
    
    
    if(array_key_exists($attr, $status_field[$table][$filed]['VALUE_'.$value])){
        $result = $status_field[$table][$filed]['VALUE_'.$value][$attr];
    }
    
    return $result;
}

/**
 * 后台调试工具
 * @author JiRY
 * @param string $message       调试信息
 * @param string $level         调试级别
 * @return null
 */
function debug($message, $level='log'){
    import('socketLog.slog',APP_LIBRARY,'.function.php');
    
    if(!function_exists('slog')){
        return null;
    }
    
    $config = array(
        'host'                => '192.168.1.180',   //websocket服务器地址，默认localhost
        'optimize'            => true,             //是否显示利于优化的参数，如果运行时间，消耗内存等，默认为false
        'show_included_files' => true,             //是否显示本次程序运行加载了哪些文件，默认为false
        'error_handler'       => true,             //是否接管程序错误，将程序错误显示在console中，默认为false
        'force_client_ids'    => array(             //日志强制记录到配置的client_id,默认为空,client_id必须在allow_client_ids中
        ),
        'allow_client_ids'    => array(             //限制允许读取日志的client_id，默认为空,表示所有人都可以获得日志。
            'JiRY',
        ),
    );
    
    slog( $config , 'config' );
    slog( $message , $level );
}

/**
 * 后台分页样式数据处理-（不含列表数据） * 
 * @param int $count        总记录数
 * @param int $size    每页显示数
 * @param int $p            当前页码
 * @return array
 */
function show_page($count,$size=null,$p=null){
        //当前页数
        $page_index  = $p ? $p : I('get.p',1);
        //每页条数
        $page_size  = is_null($size)?(C('PAGE_SIZE')?C('PAGE_SIZE'):20):$size;
        //总页数
        $all_page   = ceil($count / $page_size);
        
        //实例化分页类
        $Page       = new \Think\Page( $count , $page_size );
        // 分页显示输出
        $show       = $Page->show();
        
        return array(
            'all_page'      => $all_page,
            'totalCount'    => $count,
            'page'          => $page_size,
            'numPerPage'    => $page_index,
            'pagehtml'      => $show
        );
        
    }
   
/**
 * 获取汉字的首字母
 * @param type $s0
 * @return string
 */
function getfirstchar($s0) {
    $fchar = ord($s0{0});
    if ($fchar >= ord("A") and $fchar <= ord("z"))
        return strtoupper($s0{0});
    $s1 = iconv("UTF-8", "gb2312", $s0);
    $s2 = iconv("gb2312", "UTF-8", $s1);
    if ($s2 == $s0) {
        $s = $s1;
    } else {
        $s = $s0;
    }
    $asc = ord($s{0}) * 256 + ord($s{1}) - 65536;
    if ($asc >= -20319 and $asc <= -20284)
        return "A";
    if ($asc >= -20283 and $asc <= -19776)
        return "B";
    if ($asc >= -19775 and $asc <= -19219)
        return "C";
    if ($asc >= -19218 and $asc <= -18711)
        return "D";
    if ($asc >= -18710 and $asc <= -18527)
        return "E";
    if ($asc >= -18526 and $asc <= -18240)
        return "F";
    if ($asc >= -18239 and $asc <= -17923)
        return "G";
    if ($asc >= -17922 and $asc <= -17418)
        return "I";
    if ($asc >= -17417 and $asc <= -16475)
        return "J";
    if ($asc >= -16474 and $asc <= -16213)
        return "K";
    if ($asc >= -16212 and $asc <= -15641)
        return "L";
    if ($asc >= -15640 and $asc <= -15166)
        return "M";
    if ($asc >= -15165 and $asc <= -14923)
        return "N";
    if ($asc >= -14922 and $asc <= -14915)
        return "O";
    if ($asc >= -14914 and $asc <= -14631)
        return "P";
    if ($asc >= -14630 and $asc <= -14150)
        return "Q";
    if ($asc >= -14149 and $asc <= -14091)
        return "R";
    if ($asc >= -14090 and $asc <= -13319)
        return "S";
    if ($asc >= -13318 and $asc <= -12839)
        return "T";
    if ($asc >= -12838 and $asc <= -12557)
        return "W";
    if ($asc >= -12556 and $asc <= -11848)
        return "X";
    if ($asc >= -11847 and $asc <= -11056)
        return "Y";
    if ($asc >= -11055 and $asc <= -10247)
        return "Z";
    return '';
}

/**
 * 生成Excel模板文件 并下载
 * 暂时最大支持26个字段
 */
function setExcelTemp($data,$file_name,$title='match_templet') {
        import('PHPExcel.PHPExcel', APP_LIBRARY, '.php');  
        $objPHPExcel = new \PHPExcel();        
        $objPHPExcel->getProperties()
                ->setCreator("PAD-PHONE.COM")
                ->setLastModifiedBy("PAD-PHONE.COM")
                ->setTitle($title)
                ->setSubject($title)
                ->setDescription($title)
                ->setKeywords("excel")
                ->setCategory("result file");

        $i=0;
        
        foreach($data as $val){
            $i++;
            for ($j= 0; $j < count($val); $j++) {
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue(strtoupper(chr($j+65)).$i, $val[$j]); 
            }
        }
        
        $objPHPExcel->getActiveSheet()->setTitle('match_data');
        $objPHPExcel->setActiveSheetIndex(0);

        //header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'.$file_name.'.xls"');
        header('Cache-Control: max-age=0');
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        exit;
}

/**
 * 获取EXCEL 文件值
 * @param string $filename
 * @return type
 */
function getExcel($filename) {
    //$filename = 'match.xls';
    import('PHPExcel.PHPExcel', APP_LIBRARY, '.php');
    
    //默认用excel2007读取excel，若格式不对，则用之前的版本进行读取
    $PHPReader = new \PHPExcel_Reader_Excel2007();
    if (!$PHPReader->canRead($filename)) {
        $PHPReader = new \PHPExcel_Reader_Excel5();
        if (!$PHPReader->canRead($filename)) {
            return false;
        }
    }

    //加载文件
    $PHPExcel = $PHPReader->load($filename);
    //读取excel文件中的第一个工作表
    $current_sheet = $PHPExcel->getSheet(0);
    //取得最大的列号
    $column = $current_sheet->getHighestColumn();
    //取得一共有多少行
    $row = $current_sheet->getHighestRow();
    
    //从第二行开始输出，因为excel表中第一行为列名
    $res = array();
    for ($currentRow = 2; $currentRow <= $row; $currentRow++) {
        $_tmp = array();
        //从第A列开始输出
        for ($currentColumn = 'A'; $currentColumn <= $column; $currentColumn++) {
            $val = $current_sheet->getCellByColumnAndRow(ord($currentColumn) - 65, $currentRow)->getValue(); /*             * ord()将字符转为十进制数 */
            $_tmp[] = $val;
        }
        $res[] = $_tmp;
    }
    
    return $res;
}
